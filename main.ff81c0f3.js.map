{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","messageStart","messageLose","messageWin","scoreBoard","tableCells","querySelectorAll","size","score","scoreNumber","keyCode","left","up","right","down","gameTable","isGameTableFull","some","row","randomNumber","Math","floor","random","col","mergeTiles","data","arr","currentNumber","shift","i","nextNumber","push","slice","updateGameBoard","direct","gameData","shifted","filter","val","j","length","reverse","mergedValues","gameEnd","updateScore","reduce","acc","cur","textContent","performAction","gameDataNext","displayGameResult","result","classList","remove","removeEventListener","handleKeyPress","startNewGame","add","cleanTable","updateGameDataUnpacked","addEventListener","forEach","el","_","ind","gameUnpacked","rows","cells","text","className","e","includes"],"mappings":"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","file":"main.ff81c0f3.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst scoreBoard = document.querySelector('.game-score');\nconst tableCells = document.querySelectorAll('td');\nconst size = 4;\nlet score = 0;\nlet scoreNumber = [];\n\nconst keyCode = {\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n};\n\nlet gameTable = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction isGameTableFull() {\n  return gameTable.some(row => row === 0);\n}\n\nfunction randomNumber() {\n  while (!isGameTableFull()) {\n    const row = Math.floor(Math.random() * size);\n    const col = Math.floor(Math.random() * size);\n\n    if (gameTable[row][col] === 0) {\n      gameTable[row][col] = (Math.random() <= 0.1) ? 4 : 2;\n      break;\n    }\n  }\n}\n\nfunction mergeTiles(data) {\n  const arr = [];\n  let currentNumber = data.shift();\n\n  if (!currentNumber) {\n    return;\n  }\n\n  for (let i = 0; i < size; i++) {\n    const nextNumber = data.shift();\n\n    if (!nextNumber) {\n      if (currentNumber) {\n        arr.push(currentNumber);\n      }\n      break;\n    } else if (currentNumber === nextNumber) {\n      arr.push(currentNumber + nextNumber);\n      scoreNumber.push(currentNumber + nextNumber);\n      currentNumber = null;\n    } else if (currentNumber !== nextNumber) {\n      if (currentNumber) {\n        arr.push(currentNumber);\n      }\n      currentNumber = nextNumber;\n    }\n  }\n\n  return arr.slice();\n}\n\nfunction updateGameBoard(direct) {\n  const gameData = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  switch (direct) {\n    case keyCode.left:\n      for (let i = 0; i < size; i++) {\n        const shifted = mergeTiles(gameTable[i].filter((val) => val > 0));\n\n        if (shifted) {\n          for (let j = 0; j < shifted.length; j++) {\n            gameData[i][j] = shifted[j];\n          }\n        }\n      }\n      break;\n    case keyCode.right:\n      for (let i = 0; i < size; i++) {\n        const shifted = mergeTiles(gameTable[i].filter((val) =>\n          val > 0).reverse());\n\n        if (shifted) {\n          for (let j = 0; j < shifted.length; j++) {\n            gameData[i][size - 1 - j] = shifted[j];\n          }\n        }\n      }\n      break;\n    case keyCode.up:\n      for (let j = 0; j < size; j++) {\n        const arr = [];\n\n        for (let i = 0; i < size; i++) {\n          arr.push(gameTable[i][j]);\n        }\n\n        const mergedValues = mergeTiles(arr.filter((val) => val > 0));\n\n        if (mergedValues) {\n          for (let i = 0; i < mergedValues.length; i++) {\n            gameData[i][j] = mergedValues[i];\n          }\n        }\n      }\n      break;\n    case keyCode.down:\n      for (let j = 0; j < size; j++) {\n        const arr = [];\n\n        for (let i = 0; i < size; i++) {\n          arr.push(gameTable[size - 1 - i][j]);\n        }\n\n        const mergedValues = mergeTiles(arr.filter((val) => val > 0));\n\n        if (mergedValues) {\n          for (let i = 0; i < mergedValues.length; i++) {\n            gameData[size - 1 - i][j] = mergedValues[i];\n          }\n        }\n      }\n      break;\n    default:\n      break;\n  }\n\n  return gameData;\n}\n\nfunction gameEnd() {\n  if (`${gameTable}` !== `${updateGameBoard(keyCode.left)}`\n    || `${gameTable}` !== `${updateGameBoard(keyCode.right)}`\n    || `${gameTable}` !== `${updateGameBoard(keyCode.up)}`\n    || `${gameTable}` !== `${updateGameBoard(keyCode.down)}`) {\n    return true;\n  }\n}\n\nfunction updateScore() {\n  if (scoreNumber.length > 0) {\n    score += scoreNumber.reduce((acc, cur) => acc + cur);\n    scoreBoard.textContent = !score ? 0 : score;\n  }\n}\n\nfunction performAction(direct) {\n  scoreNumber = [];\n\n  const gameDataNext = updateGameBoard(direct);\n\n  if (`${gameTable}` === `${gameDataNext}`) {\n    return false;\n  }\n\n  gameTable = gameDataNext;\n\n  return true;\n}\n\nfunction displayGameResult(result) {\n  result ? messageWin.classList.remove('hidden')\n    : messageLose.classList.remove('hidden');\n  document.removeEventListener('keydown', handleKeyPress);\n}\n\nfunction startNewGame() {\n  button.classList.remove('start');\n  button.textContent = 'Restart';\n  button.classList.add('restart');\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  scoreBoard.textContent = '0';\n  score = 0;\n  cleanTable();\n  randomNumber();\n  randomNumber();\n  updateGameDataUnpacked();\n  document.addEventListener('keydown', handleKeyPress);\n}\n\nfunction cleanTable() {\n  [...tableCells].forEach(el => {\n    el.classList.remove(`field-cell--${el.textContent}`);\n    el.textContent = '';\n  });\n\n  gameTable.forEach(row => row.forEach((_, ind) => {\n    row[ind] = 0;\n  }));\n}\n\nfunction updateGameDataUnpacked() {\n  const gameUnpacked = [];\n\n  gameTable.forEach((rows) => {\n    rows.forEach((cells) => {\n      gameUnpacked.push(cells);\n    });\n  });\n\n  tableCells.forEach((cells) => {\n    const text = gameUnpacked.shift();\n\n    cells.textContent = !text ? null : text;\n    cells.className = 'field-cell';\n    cells.classList.add(`field-cell--${cells.textContent}`);\n  });\n}\n\nfunction handleKeyPress(e) {\n  if (e.keyCode < 36 || e.keyCode > 41) {\n    return;\n  }\n\n  if (performAction(e.keyCode)) {\n    if (scoreNumber.includes(2048)) {\n      displayGameResult(true);\n    }\n    updateScore();\n    randomNumber();\n\n    if (!isGameTableFull() && !gameEnd()) {\n      displayGameResult(false);\n    }\n    scoreNumber = [];\n    updateGameDataUnpacked();\n  }\n};\nbutton.addEventListener('click', startNewGame);\n"]}